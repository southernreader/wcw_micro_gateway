var mongoose = require('mongoose'), Schema = mongoose.Schema;
var dotty = require('dotty');
var MongooseModelInstance = require('./MongooseModelInstance');

module.exports = MongooseModel;

function MongooseModel(mongoose,modelName,attributes,options) {
	Schema = new mongoose.Schema(attributes);
	this.model = mongoose.model(modelName, Schema);
}

MongooseModel.prototype.findAll = function(condition,fields,options,cb){
		this.model.find(condition.where).then(

			function(result){
				var resultarray = [];
				for(i in result){
					resultarray.push(new MongooseModelInstance(result[i]));
				}
				cb(null,resultarray);
			},function(err){
				console.log('Error: ' + err);
			});
};


MongooseModel.prototype.save = function(attributes,cb){
	console.log("SAVE");
	var template = new this.model(attributes);
		template.save(function(result){
				var resultarray = [];
				for(i in result){
					resultarray.push(new MongooseModelInstance(result[i]));
				}
				cb(null,resultarray);
			},function(err){
				console.log('Error: ' + err);
			});
}

MongooseModel.prototype.update = function(condition,attributes,cb){
	console.log('Executing Update '+JSON.stringify(condition)+"\n "+JSON.stringify(attributes));
	this.model.update(condition,attributes,{upsert:true}).then(
			function(result){
				console.log('Successfully Updated');
				cb(null,result);
			},function(err){
				console.log('Error in update');
				console.log('Error: ' + err);
			});
};

MongooseModel.prototype.findOneAndUpdate = function(condition,attributes,cb){
	console.log('Executing Update '+JSON.stringify(attributes));
	this.model.findOneAndUpdate(condition,attributes,cb);
};

MongooseModel.prototype.find = function(condition,fields,options,cb){
	this.model.find(condition.where,fields).then(
				function(result){
				// console.log("QUERY RESULTS ",result);
				var resultarray = [];
				for(i in result){
					resultarray.push(new MongooseModelInstance(result[i]));
				}
				cb(null,resultarray);		
			},function(err){
				console.log('Error: ' + err);
			});
};

MongooseModel.prototype.findMax = function(condition,fields,options,limit,cb){
	console.log(condition,fields,options,limit,console.log(cb))
	this.model.find(condition).sort(options).limit(limit).then(
			function(result){
				console.log("Max alert id ",result[0].Alert_Id)
				//result.exec(function(error,posts){
				cb(null,result[0].Alert_Id+1);
			//})		
			},
			function(err){
				console.log('Error: ' + err);
			});
};

MongooseModel.prototype.count= function(condition, cb){
	this.model.count(condition).then(
			function(result){
				console.log("count "+result)
				cb(null,new MongooseModelInstance(result));
			},function(err){
				console.log('Error: ' + err);
			});
};

MongooseModel.prototype.delete = function(condition,fields,options,cb){
	this.model.find(condition.where,fields).remove(
				function(result){
					cb(null,result);
				});
};

MongooseModel.prototype.build = function(options){
	return new MongooseModelInstance(options,this.model);
}

MongooseModel.prototype.hasMany = function(modelname,options){
	this.model.hasMany(modelname.model,options);
}

MongooseModel.prototype.belongsTo = function(modelname,options){
	this.model.belongsTo(modelname.model,options);
}

var makequery = function(query){
	var newquery = query.where;
	var formedquery = {};
	if(dotty.exists(newquery,"$and")){
		formedquery = resolveand(newquery);
	}
	else if(dotty.exists(newquery,"$or")){
		formedquery = resolveor(newquery);
	}
	else {
		formedquery = newquery;
	}
	return formedquery;
};

var resolveand = function(query){
	var newquery = query.$and;
	var formedquery = [];
	for(i in newquery){
		if(dotty.exists(newquery[i],"$or")){
			formedquery.push(resolveor(newquery[i]));
		}
		else{
			formedquery.push(newquery[i]);
		}
	}
	return mongoose.and.apply(null,formedquery);
};

var resolveor = function(query){
	var newquery = query.$or;
	var formedquery = [];
	for(i in newquery){
		if(dotty.exists(newquery[i],"$and")){
			formedquery.push(resolveand(newquery[i]));
		}
		else{
			formedquery.push(newquery[i]);
		}
	}
	return mongoose.or.apply(null,formedquery);
};
