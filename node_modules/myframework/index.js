var path = require('path');
var fs = require('fs');
var MailObj = require('./lib/MailObj');
var LdapObj = require('./lib/LdapObj');
var MongooseObj = require('./lib/MongooseObj');
var SolrObj = require('./lib/SolrObj');
var config = require('config');
var async = require('async');

function configure(app,cb){
    async.parallel([
       function(cb){
            configuredB(app,config.database);
            cb(null,'1');
        }
    ],function(err, results){
         cb(err,results);
    });
}

function configuredB(app, config) {
    console.log('..........Configuring the database');
    var dBObj = createDBObj(config);
    app.set('db', dBObj);

    for (i in config.models) {
        var tablename = config.models[i].tablename;
        var fields = config.models[i].fields;
        var row = {};
         for (field in fields) {
          row = fields[field];
         }
        console.log("row "+JSON.stringify(row));
        var model = dBObj.model(tablename, row, {
            createdAt: false,
            updatedAt: false,
            freezeTableName: true
        });
        app.set(config.models[i].name,model);
        //console.log("MODEL ",app.get("Inventory"));
    }
    console.log('..........Database Configuration Done');
}

function createDBObj(options) {
    if (options.name == 'SQL') {
        return new SqlObj(options);
    } else {
        return new MongooseObj(options);
    }
}

function configureLdap(app,config){
    console.log('..........Configuring Ldap');
    var options= {};
    options.url = config.url;
    var ldapobj = new LdapObj(options);
    app.set('ldapclient', ldapobj);
    console.log('..........Ldap Configuration Done');   
}

function createSolrObj(app, config) {
    console.log('..........Configuring Solr');
    var solrobj = new SolrObj(config);
    app.set('solr', solrobj);
}

function createMailObj(app, config) {
    var mailobj = new MailObj(config);
    app.set('mail', mailobj);
}

module.exports.configure = configure;